'use strict';

/* 
Теоретичні питання
1. Опишіть своїми словами, що таке метод об'єкту

	Метод об'єкту, це функція в об'єкті, яка виконує певні дії з даними об'єкта.

2. Який тип даних може мати значення властивості об'єкта?

	Значення властивості об'єкта може містити будь який тип дпних.

3. Об'єкт це посилальний тип даних. Що означає це поняття?

	Посилальний вид даних означає, що при копіюванні значення об'єкту не дублюються в пам'яті браузера і копія об'єкту посилається на дані основного об'єкту копією якого вона є.

*/

/* 
Практичні завдання
1. Створіть об'єкт product з властивостями name, price та discount. Додайте метод для виведення повної ціни товару з урахуванням знижки. Викличте цей метод та результат виведіть в консоль.
*/

const product = {
	name: 'notebook',
	price: 15000,
	discount: 1000,
	calcPriceDiscount() {
		return this.price - this.discount;
	},
}

console.log(product.calcPriceDiscount());

/* 
2. Напишіть функцію, яка приймає об'єкт з властивостями name та age, і повертає рядок з привітанням і віком,
наприклад "Привіт, мені 30 років". Попросіть користувача ввести своє ім'я та вік
за допомогою prompt, і викличте функцію з введеними даними. Результат виклику функції виведіть з допомогою alert.
*/

const user = {};

user.name = prompt('Entered your name:')
user.age = prompt('Entered your age:')

const userGreetings = (obj) => {
	return `Привіт, мені ${obj.age} років`;
}

alert(userGreetings(user));

/* 
3.Опціональне. Завдання:
Реалізувати повне клонування об'єкта.
Технічні вимоги:
- Написати функцію для рекурсивного повного клонування об'єкта (без єдиної передачі за посиланням, внутрішня вкладеність властивостей об'єкта може бути досить великою).
- Функція має успішно копіювати властивості у вигляді об'єктів та масивів на будь-якому рівні вкладеності.
- У коді не можна використовувати вбудовані механізми клонування, такі як функція Object.assign() або spread.
*/

const obj = {
	a: 1,
	b: 2,
	c: {
		d: 3,
		e: 4,
		f: {
			g: 5,
			h: 6,
		},
	},
}

const getCloneObject = (object) => {
	const cloneObject = {};

	for (const key in object) {
		const element = object[key];

		if (typeof element === 'object') {
			cloneObject[key] = getCloneObject(element);
		} else {
			cloneObject[key] = element;
		}
	}

	return cloneObject;
}

getCloneObject(obj);
